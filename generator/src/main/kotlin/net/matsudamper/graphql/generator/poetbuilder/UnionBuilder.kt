package net.matsudamper.graphql.generator.poetbuilder

import com.squareup.kotlinpoet.*
import net.matsudamper.graphql.generator.util.ClassNames
import net.matsudamper.graphql.generator.util.TypeDefinition

/**
 * sealed interface QlTimelineUnion : GraphQlNamedElement {
 *     class User<User: QlBaseUserInterface>(
 *         value: User
 *     ) : QlTimeline,
 *         QlBaseUserInterface by value
 *
 *     class Post<Post: QlBasePostInterface>(
 *         value: Post
 *     ) : QlTimeline,
 *         QlBasePostInterface by value
 * }
 */
internal class UnionBuilder(
    private val typeDefine: TypeDefinition,
    private val graphQlName: String,
    private val union: TypeDefinition.Union
) {
    private val thisType = typeDefine.getClassName(graphQlName)
    private val spec = TypeSpec.interfaceBuilder(thisType)
        .addModifiers(KModifier.SEALED)
        .addSuperinterface(ClassNames.GraphQlNamedElement.getClassName())

    init {
        spec.addTypes(
            union.child.map { (name, _) ->
                val baseInterfaceType = ClassNames.BaseTypeInterface.getClassName(name)
                val typeVariable = TypeVariableName(
                    buildString {
                        append(union.graphQlUnionName.take(1).toUpperCase())
                        append(union.graphQlUnionName.drop(1))
                    }
                ).copy(bounds = listOf(baseInterfaceType))
                TypeSpec.classBuilder(ClassName("", name))
                    .addTypeVariable(typeVariable)
                    .primaryConstructor(
                        FunSpec.constructorBuilder()
                            .addParameter("value", typeVariable)
                            .build()
                    )
                    .addSuperinterface(thisType)
                    .addSuperinterface(baseInterfaceType, "value")
                    .build()
            }
        )
    }

    fun build() = FileSpec.builder(thisType.packageName, thisType.simpleName)
        .addComment("Generated by ${UnionBuilder::class.simpleName}")
        .addType(spec.build())
        .build()
}