package net.matsudamper.graphql.generator.poetbuilder

import com.squareup.kotlinpoet.*
import graphql.schema.GraphQLFieldDefinition
import graphql.schema.GraphQLObjectType
import net.matsudamper.graphql.generator.Constant
import net.matsudamper.graphql.generator.util.ClassNames
import net.matsudamper.graphql.generator.util.KotlinTypeStruct
import net.matsudamper.graphql.generator.util.TypeDefinition

internal class QlBaseTypeBuilder(
    private val type: GraphQLObjectType,
    private val typeDefine: TypeDefinition,
) {
    fun build(): Result {
        val baseFields = type.getBaseFields()
        val interfaceClassName = ClassNames.BaseTypeInterface.getClassName(type.name)

        return Result(
            qlBaseInterface = TypeSpec.interfaceBuilder(interfaceClassName)
                .addKdoc("Generated by ${QlBaseTypeBuilder::class.simpleName}")
                .addSuperinterface(ClassNames.GraphQlNamedElement.getClassName())
                .addProperties(
                    baseFields.map { field ->
                        val fieldElement = KotlinTypeStruct
                            .fromGraphQlType(field.type)
                            .getTypeName(typeDefine)

                        PropertySpec.builder(field.name, fieldElement)
                            .build()
                    }
                )
                .build(),
            qlBase = run {
                val className = ClassNames.NamedObject.getClassName(type.name)

                TypeSpec.classBuilder(className)
                    .addKdoc("Generated by ${QlBaseTypeBuilder::class.simpleName}")
                    .addSuperinterface(ClassNames.GraphQlNamedElement.getClassName())
                    .addModifiers(KModifier.ABSTRACT)
                    .addSuperinterface(interfaceClassName)
                    .addProperty(
                        PropertySpec.builder(
                            name = ClassNames.GraphQlNamedElement.graphqlName,
                            type = ClassNames.String,
                        )
                            .addModifiers(KModifier.OVERRIDE)
                            .initializer(
                                CodeBlock.builder()
                                    .add(""""${type.name}"""")
                                    .build()
                            )
                            .build()
                    )
                    .build()
            }
        )
    }

    private fun GraphQLObjectType.getBaseFields(): List<GraphQLFieldDefinition> {
        return fields.filterNot {
            it.hasDirective(Constant.Directive.lazy) || it.arguments.isNotEmpty()
        }
    }

    data class Result(
        val qlBaseInterface: TypeSpec,
        val qlBase: TypeSpec,
    )
}

