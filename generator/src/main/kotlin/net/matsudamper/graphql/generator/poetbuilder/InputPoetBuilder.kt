package net.matsudamper.graphql.generator.poetbuilder

import com.squareup.kotlinpoet.*
import graphql.schema.GraphQLEnumType
import graphql.schema.GraphQLInputObjectField
import graphql.schema.GraphQLInputObjectType
import graphql.schema.GraphQLInputType
import net.matsudamper.graphql.generator.util.*
import net.matsudamper.graphql.generator.util.GraphQlToPoetUtil
import net.matsudamper.graphql.generator.util.KotlinTypeStruct
import net.matsudamper.graphql.generator.util.PackageNames
import net.matsudamper.graphql.generator.util.TypeDefinition

internal class InputPoetBuilder(
    private val typeDefine: TypeDefinition,
    private val packageNames: PackageNames,
) {
    fun build(name: String, value: GraphQLInputType, typeDefine: TypeDefinition): FileSpec {
        val fileSpec = FileSpec.builder(packageNames.inputPackage, name)

        val fields = value.children.map {
            it as GraphQLInputObjectField
        }

        val thisType = typeDefine.getClassName(name)
        val typeSpec = TypeSpec.classBuilder(thisType)
            .addModifiers(KModifier.DATA)
            .addType(
                TypeSpec.companionObjectBuilder()
                    .addFunction(
                        FunSpec.builder("fromInput")
                            .addAnnotation(
                                AnnotationSpec.builder(Suppress::class)
                                    .addMember(
                                        CodeBlock.of(""""UNCHECKED_CAST"""")
                                    )
                                    .build()
                            )
                            .addModifiers(KModifier.INTERNAL)
                            .returns(thisType.copy(nullable = true))
                            .addParameter(
                                ParameterSpec(
                                    "map",
                                    ClassNames.Any
                                        .copy(nullable = true)
                                )
                            )
                            .addCode(
                                CodeBlock.builder().apply {
                                    addStatement("map ?: return null")
                                    addStatement("map as Map<String, Any>")
                                    addStatement("return %T(", thisType)
                                    withIndent {
                                        fields.forEach { field ->
                                            add("${field.name} = ")
                                            add(createField(field))
                                            addStatement(",")
                                        }
                                    }
                                    addStatement(")")
                                }.build()
                            )
                            .build()
                    )
                    .build()
            )
            .addPrimaryConstructor(
                fields.map {
                    val namedObject = KotlinTypeStruct.fromGraphQlType(it.type)

                    PoetUtil.PrimaryConstructorElement(
                        name = it.name,
                        typeName = GraphQlToPoetUtil.getTypeName(namedObject, typeDefine),
                        override = false,
                        isProperty = true,
                        isPrivate = false,
                    )
                }
            )
            .build()

        return fileSpec
            .addComment("Generated by ${InputPoetBuilder::class.simpleName}")
            .addType(typeSpec)
            .build()
    }

    /**
     * QlEnumType?.fromInput(map["enumType"] as String?) as QlEnumType?
     * QlObject.fromInput(map["object"] as? Map<String, Any>?)
     * (map["$name"] as List<Any>).map {
     *     (it as List<Any>).map {
     *          QlInputType.fromInput(it) as QlInputType
     *     }
     * }
     */
    private fun createField(field: GraphQLInputObjectField): CodeBlock {
        return CodeBlock.builder().apply {
            add(
                GraphQlToPoetUtil.parseList(
                    type = field.type,
                    option = GraphQlToPoetUtil.ParseListOption(
                        singleObject = GraphQlToPoetUtil.ParseListOption.SingleObject(
                            coreBlock = { coreType ->
                                val kotlinFieldElement =
                                    KotlinTypeStruct.fromGraphQlType(field.type)
                                val type = kotlinFieldElement.getTypeName(typeDefine)
                                when (val inputType = coreType.type) {
                                    is GraphQLInputObjectType -> {
                                        add(
                                            """${type}.fromInput(map["${field.name}"]) as %T""",
                                            type
                                        )
                                    }
                                    is GraphQLEnumType -> {
                                        add(
                                            """${type}.fromInput(map["${field.name}"] as String?) as %T""",
                                            type
                                        )
                                    }
                                    else -> {
                                        add(
                                            """map["${field.name}"] as %T""",
                                            type,
                                        )
                                    }
                                }
                            }
                        ),
                        listObject = GraphQlToPoetUtil.ParseListOption.ListObject(
                            receiver = { coreType ->
                                """map["${field.name}"]"""
                            },
                            coreBlock = { coreType ->
                                val kotlinFieldElement =
                                    KotlinTypeStruct.fromGraphQlType(coreType.type)
                                val type = kotlinFieldElement.getTypeName(typeDefine)

                                when (val inputType = coreType.type) {
                                    is GraphQLInputObjectType -> {
                                        addStatement(
                                            """${type}.fromInput(it as Any?) as %T""",
                                            type.copy(nullable = coreType.isNull)
                                        )
                                    }
                                    is GraphQLEnumType -> {
                                        addStatement(
                                            """${type}.fromInput(it as String?) as %T""",
                                            type.copy(nullable = coreType.isNull)
                                        )
                                    }
                                    else -> {
                                        addStatement(
                                            """it as %T""",
                                            type.copy(nullable = coreType.isNull),
                                        )
                                    }
                                }
                            }
                        )
                    ),
                )
            )
        }.build()
    }
}