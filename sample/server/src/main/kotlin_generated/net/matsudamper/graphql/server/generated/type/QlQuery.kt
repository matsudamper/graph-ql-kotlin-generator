// Generated
package net.matsudamper.graphql.server.generated.type

import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletionStage
import kotlin.Long
import kotlin.String
import net.matsudamper.graphql.generator.lib.GraphQlNamedElement
import net.matsudamper.graphql.generator.lib.ResponseScope
import net.matsudamper.graphql.server.generated.union.QlTimelineContentsUnion

public object QlQuery {
  /**
   * Generated by QlBaseTypeBuilder
   */
  public abstract class BaseNamedObject : GraphQlNamedElement, BaseInterface {
    public override val graphqlName: String = "Query"
  }

  /**
   * Generated by QlBaseTypeBuilder
   */
  public interface BaseInterface : GraphQlNamedElement {
    public val timeline: QlTimelineContentsUnion?
  }

  /**
   * Generated by QlQueryBuilder
   */
  public abstract class Query(
    private val environment: DataFetchingEnvironment
  ) {
    public abstract fun ResponseScope<BaseInterface>.getUser(user: Long):
        CompletionStage<QlUser.BaseNamedObject?>

    public fun getUser(): CompletionStage<QlUser.BaseNamedObject?> {
      val user = environment.arguments["user"] as Long
      return with(ResponseScope(environment.getSource<BaseInterface>())) {
        getUser(
          user = user,
        )
      }
    }
  }
}
