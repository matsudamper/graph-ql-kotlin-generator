// Generated
package net.matsudamper.graphql.server.generated.type

import graphql.schema.DataFetchingEnvironment
import java.util.Date
import java.util.concurrent.CompletionStage
import kotlin.Long
import kotlin.String
import net.matsudamper.graphql.generator.lib.GraphQlNamedElement
import net.matsudamper.graphql.generator.lib.ResponseScope

public object QlUserPostContent {
  /**
   * Generated by QlBaseTypeBuilder
   */
  public abstract class BaseNamedObject : GraphQlNamedElement, BaseInterface {
    public override val graphqlName: String = "UserPostContent"
  }

  /**
   * Generated by QlBaseTypeBuilder
   */
  public interface BaseInterface : GraphQlNamedElement {
    public val id: Long

    public val text: String

    public val createDateAt: Date
  }

  /**
   * Generated by QlQueryBuilder
   */
  public abstract class Query(
    private val environment: DataFetchingEnvironment
  ) {
    public abstract fun ResponseScope<BaseInterface>.getUser():
        CompletionStage<QlUser.BaseNamedObject>

    public fun getUser(): CompletionStage<QlUser.BaseNamedObject> =
        with(ResponseScope(environment.getSource<BaseInterface>())) {
      getUser(
      )
    }
  }
}
