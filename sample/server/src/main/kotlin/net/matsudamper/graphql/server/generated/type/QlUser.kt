// Generated
package net.matsudamper.graphql.server.generated.type

import graphql.schema.DataFetchingEnvironment
import java.util.concurrent.CompletionStage
import kotlin.Long
import kotlin.String
import kotlin.collections.List
import net.matsudamper.graphql.generator.lib.GraphQlNamedElement
import net.matsudamper.graphql.generator.lib.ResponseScope

public object QlUser {
  /**
   * Generated by QlBaseTypeBuilder
   */
  public abstract class BaseNamedObject : GraphQlNamedElement, BaseInterface {
    public override val graphqlName: String = "User"
  }

  /**
   * Generated by QlBaseTypeBuilder
   */
  public interface BaseInterface : GraphQlNamedElement {
    public val id: Long
  }

  /**
   * Generated by QlQueryBuilder
   */
  public abstract class Query(
    private val environment: DataFetchingEnvironment
  ) {
    public abstract fun ResponseScope<BaseInterface>.getPostContent(id: Long):
        CompletionStage<List<QlUserPostContent.BaseNamedObject>>

    public fun getPostContent(): CompletionStage<List<QlUserPostContent.BaseNamedObject>> {
      val id = environment.arguments["id"] as Long
      return with(ResponseScope(environment.getSource<BaseInterface>())) {
        getPostContent(
          id = id,
        )
      }
    }
  }
}
